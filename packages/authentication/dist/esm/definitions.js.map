{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC;AA6rCxC,MAAM,CAAN,IAAY,UAYX;AAZD,WAAY,UAAU;IACpB,iCAAmB,CAAA;IACnB,uCAAyB,CAAA;IACzB,0CAA4B,CAAA;IAC5B,mCAAqB,CAAA;IACrB,mCAAqB,CAAA;IACrB,yCAA2B,CAAA;IAC3B,iDAAmC,CAAA;IACnC,qCAAuB,CAAA;IACvB,iCAAmB,CAAA;IACnB,mCAAqB,CAAA;IACrB,6BAAe,CAAA;AACjB,CAAC,EAZW,UAAU,KAAV,UAAU,QAYrB","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\nimport type { PluginListenerHandle } from '@capacitor/core';\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    /**\n     * These configuration values are available:\n     *\n     * @since 0.1.0\n     */\n    FirebaseAuthentication?: {\n      /**\n       * Configure whether the plugin should skip the native authentication.\n       * Only needed if you want to use the Firebase JavaScript SDK.\n       * This configuration option has no effect on Firebase account linking.\n       *\n       * **Note that the plugin may behave differently across the platforms.**\n       *\n       * Only available for Android and iOS.\n       *\n       * @default false\n       * @example false\n       * @since 0.1.0\n       */\n      skipNativeAuth?: boolean;\n      /**\n       * Configure the providers that should be loaded by the plugin.\n       *\n       * Possible values: `[\"apple.com\", \"facebook.com\", \"gc.apple.com\", \"github.com\", \"google.com\", \"microsoft.com\", \"playgames.google.com\", \"twitter.com\", \"yahoo.com\", \"phone\"]`\n       *\n       * Only available for Android and iOS.\n       *\n       * @default []\n       * @example [\"apple.com\", \"facebook.com\"]\n       * @since 0.1.0\n       */\n      providers?: string[];\n    };\n  }\n}\n\nexport interface FirebaseAuthenticationPlugin {\n  /**\n   * Applies a verification code sent to the user by email.\n   *\n   * @since 0.2.2\n   */\n  applyActionCode(options: ApplyActionCodeOptions): Promise<void>;\n  /**\n   * Completes the password reset process.\n   *\n   * @since 0.2.2\n   */\n  confirmPasswordReset(options: ConfirmPasswordResetOptions): Promise<void>;\n  /**\n   * Creates a new user account with email and password.\n   * If the new account was created, the user is signed in automatically.\n   *\n   * @since 0.2.2\n   */\n  createUserWithEmailAndPassword(\n    options: CreateUserWithEmailAndPasswordOptions,\n  ): Promise<SignInResult>;\n  /**\n   * Deletes and signs out the user.\n   *\n   * @since 1.3.0\n   */\n  deleteUser(): Promise<void>;\n  /**\n   * Fetches the currently signed-in user.\n   *\n   * @since 0.1.0\n   */\n  getCurrentUser(): Promise<GetCurrentUserResult>;\n  /**\n   * Fetches the Firebase Auth ID Token for the currently signed-in user.\n   *\n   * @since 0.1.0\n   */\n  getIdToken(options?: GetIdTokenOptions): Promise<GetIdTokenResult>;\n  /**\n   * Returns the `SignInResult` from the redirect-based sign-in flow.\n   *\n   * If sign-in was unsuccessful, fails with an error.\n   * If no redirect operation was called, returns a `SignInResult` with a null user.\n   *\n   * Only available for Web.\n   *\n   * @since 1.3.0\n   */\n  getRedirectResult(): Promise<SignInResult>;\n  /**\n   * Get the tenant id.\n   *\n   * @since 1.1.0\n   */\n  getTenantId(): Promise<GetTenantIdResult>;\n  /**\n   * Checks if an incoming link is a sign-in with email link suitable for `signInWithEmailLink`.\n   *\n   * @since 1.1.0\n   */\n  isSignInWithEmailLink(\n    options: IsSignInWithEmailLinkOptions,\n  ): Promise<IsSignInWithEmailLinkResult>;\n  /**\n   * Links the user account with Apple authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * @since 1.1.0\n   */\n  linkWithApple(options?: LinkWithOAuthOptions): Promise<LinkResult>;\n  /**\n   * Links the user account with Email authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * @since 1.1.0\n   */\n  linkWithEmailAndPassword(\n    options: LinkWithEmailAndPasswordOptions,\n  ): Promise<LinkResult>;\n  /**\n   * Links the user account with Email authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * @since 1.1.0\n   */\n  linkWithEmailLink(options: LinkWithEmailLinkOptions): Promise<LinkResult>;\n  /**\n   * Links the user account with Facebook authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * @since 1.1.0\n   */\n  linkWithFacebook(options?: LinkWithOAuthOptions): Promise<LinkResult>;\n  /**\n   * Links the user account with Game Center authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * Only available for iOS.\n   *\n   * @since 1.3.0\n   */\n  linkWithGameCenter(options?: LinkWithOAuthOptions): Promise<LinkResult>;\n  /**\n   * Links the user account with GitHub authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * @since 1.1.0\n   */\n  linkWithGithub(options?: LinkWithOAuthOptions): Promise<LinkResult>;\n  /**\n   * Links the user account with Google authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * @since 1.1.0\n   */\n  linkWithGoogle(options?: LinkWithOAuthOptions): Promise<LinkResult>;\n  /**\n   * Links the user account with Microsoft authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * @since 1.1.0\n   */\n  linkWithMicrosoft(options?: LinkWithOAuthOptions): Promise<LinkResult>;\n  /**\n   * Links the user account with Phone Number authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * @since 1.1.0\n   */\n  linkWithPhoneNumber(options: LinkWithPhoneNumberOptions): Promise<LinkResult>;\n  /**\n   * Links the user account with Play Games authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * Only available for Android.\n   *\n   * @since 1.1.0\n   */\n  linkWithPlayGames(options?: LinkWithOAuthOptions): Promise<LinkResult>;\n  /**\n   * Links the user account with Twitter authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * @since 1.1.0\n   */\n  linkWithTwitter(options?: LinkWithOAuthOptions): Promise<LinkResult>;\n  /**\n   * Links the user account with Yahoo authentication provider.\n   *\n   * The user must be logged in on the native layer.\n   * The `skipNativeAuth` configuration option has no effect here.\n   *\n   * @since 1.1.0\n   */\n  linkWithYahoo(options?: LinkWithOAuthOptions): Promise<LinkResult>;\n  /**\n   * Reloads user account data, if signed in.\n   *\n   * @since 1.3.0\n   */\n  reload(): Promise<void>;\n  /**\n   * Sends a verification email to the currently signed in user.\n   *\n   * @since 0.2.2\n   */\n  sendEmailVerification(): Promise<void>;\n  /**\n   * Sends a password reset email.\n   *\n   * @since 0.2.2\n   */\n  sendPasswordResetEmail(options: SendPasswordResetEmailOptions): Promise<void>;\n  /**\n   * Sends a sign-in email link to the user with the specified email.\n   *\n   * To complete sign in with the email link, call `signInWithEmailLink` with the email address and the email link supplied in the email sent to the user.\n   *\n   * @since 1.1.0\n   */\n  sendSignInLinkToEmail(options: SendSignInLinkToEmailOptions): Promise<void>;\n  /**\n   * Sets the user-facing language code for auth operations.\n   *\n   * @since 0.1.0\n   */\n  setLanguageCode(options: SetLanguageCodeOptions): Promise<void>;\n  /**\n   * Sets the tenant id.\n   *\n   * @since 1.1.0\n   */\n  setTenantId(options: SetTenantIdOptions): Promise<void>;\n  /**\n   * Signs in as an anonymous user.\n   *\n   * @since 1.1.0\n   */\n  signInAnonymously(): Promise<SignInResult>;\n  /**\n   * Starts the Apple sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithApple(options?: SignInWithOAuthOptions): Promise<SignInResult>;\n  /**\n   * Starts the Custom Token sign-in flow.\n   *\n   * This method cannot be used in combination with `skipNativeAuth` on Android and iOS.\n   * In this case you have to use the `signInWithCustomToken` interface of the Firebase JS SDK directly.\n   *\n   * @since 0.1.0\n   */\n  signInWithCustomToken(\n    options: SignInWithCustomTokenOptions,\n  ): Promise<SignInResult>;\n  /**\n   * Starts the sign-in flow using an email and password.\n   *\n   * @since 0.2.2\n   */\n  signInWithEmailAndPassword(\n    options: SignInWithEmailAndPasswordOptions,\n  ): Promise<SignInResult>;\n  /**\n   * Signs in using an email and sign-in email link.\n   *\n   * @since 1.1.0\n   */\n  signInWithEmailLink(\n    options: SignInWithEmailLinkOptions,\n  ): Promise<SignInResult>;\n  /**\n   * Starts the Facebook sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithFacebook(options?: SignInWithOAuthOptions): Promise<SignInResult>;\n  /**\n   * Starts the Game Center sign-in flow.\n   *\n   * Only available for iOS.\n   *\n   * @since 1.3.0\n   */\n  signInWithGameCenter(\n    options?: SignInOptions | SignInWithOAuthOptions,\n  ): Promise<SignInResult>;\n  /**\n   * Starts the GitHub sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithGithub(options?: SignInWithOAuthOptions): Promise<SignInResult>;\n  /**\n   * Starts the Google sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithGoogle(options?: SignInWithOAuthOptions): Promise<SignInResult>;\n  /**\n   * Starts the Microsoft sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithMicrosoft(options?: SignInWithOAuthOptions): Promise<SignInResult>;\n  /**\n   * Starts the sign-in flow using a phone number.\n   *\n   * Either the phone number or the verification code and verification ID must be provided.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  signInWithPhoneNumber(\n    options: SignInWithPhoneNumberOptions,\n  ): Promise<SignInWithPhoneNumberResult>;\n  /**\n   * Starts the Play Games sign-in flow.\n   *\n   * Only available for Android.\n   *\n   * @since 0.1.0\n   */\n  signInWithPlayGames(options?: SignInWithOAuthOptions): Promise<SignInResult>;\n  /**\n   * Starts the Twitter sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithTwitter(options?: SignInWithOAuthOptions): Promise<SignInResult>;\n  /**\n   * Starts the Yahoo sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithYahoo(options?: SignInWithOAuthOptions): Promise<SignInResult>;\n  /**\n   * Starts the sign-out flow.\n   *\n   * @since 0.1.0\n   */\n  signOut(): Promise<void>;\n  /**\n   * Unlinks a provider from a user account.\n   *\n   * @since 1.1.0\n   */\n  unlink(options: UnlinkOptions): Promise<UnlinkResult>;\n  /**\n   * Updates the email address of the currently signed in user.\n   *\n   * @since 0.1.0\n   */\n  updateEmail(options: UpdateEmailOptions): Promise<void>;\n  /**\n   * Updates the password of the currently signed in user.\n   *\n   * @since 0.1.0\n   */\n  updatePassword(options: UpdatePasswordOptions): Promise<void>;\n  /**\n   * Updates a user's profile data.\n   *\n   * @since 1.3.0\n   */\n  updateProfile(options: UpdateProfileOptions): Promise<void>;\n  /**\n   * Sets the user-facing language code to be the default app language.\n   *\n   * @since 0.1.0\n   */\n  useAppLanguage(): Promise<void>;\n  /**\n   * Instrument your app to talk to the Authentication emulator.\n   *\n   * @since 0.2.0\n   */\n  useEmulator(options: UseEmulatorOptions): Promise<void>;\n  /**\n   * Listen for the user's sign-in state changes.\n   *\n   * @since 0.1.0\n   */\n  addListener(\n    eventName: 'authStateChange',\n    listenerFunc: AuthStateChangeListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  /**\n   * Listen for a completed phone verification.\n   *\n   * This listener only fires in two situations:\n   * 1. **Instant verification**: In some cases the phone number can be instantly\n   * verified without needing to send or enter a verification code.\n   * 2. **Auto-retrieval**: On some devices Google Play services can automatically\n   * detect the incoming verification SMS and perform verification without\n   * user action.\n   *\n   * Only available for Android.\n   *\n   * @since 1.3.0\n   */\n  addListener(\n    eventName: 'phoneVerificationCompleted',\n    listenerFunc: PhoneVerificationCompletedListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  /**\n   * Listen for a failed phone verification.\n   *\n   * @since 1.3.0\n   */\n  addListener(\n    eventName: 'phoneVerificationFailed',\n    listenerFunc: PhoneVerificationFailedListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  /**\n   * Listen for a phone verification code.\n   *\n   * @since 1.3.0\n   */\n  addListener(\n    eventName: 'phoneCodeSent',\n    listenerFunc: PhoneCodeSentListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * @since 0.1.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface ApplyActionCodeOptions {\n  /**\n   * A verification code sent to the user.\n   *\n   * @since 0.2.2\n   */\n  oobCode: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface ConfirmPasswordResetOptions {\n  /**\n   * A verification code sent to the user.\n   *\n   * @since 0.2.2\n   */\n  oobCode: string;\n  /**\n   * The new password.\n   *\n   * @since 0.2.2\n   */\n  newPassword: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface CreateUserWithEmailAndPasswordOptions {\n  /**\n   * @since 0.2.2\n   */\n  email: string;\n  /**\n   * @since 0.2.2\n   */\n  password: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface GetCurrentUserResult {\n  /**\n   * The currently signed-in user, or null if there isn't any.\n   *\n   * @since 0.1.0\n   */\n  user: User | null;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface GetIdTokenOptions {\n  /**\n   * Force refresh regardless of token expiration.\n   *\n   * @since 0.1.0\n   */\n  forceRefresh: boolean;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface GetIdTokenResult {\n  /**\n   * The Firebase Auth ID token JWT string.\n   *\n   * @since 0.1.0\n   */\n  token: string;\n}\n\n/**\n * @since 1.1.0\n */\nexport interface GetTenantIdResult {\n  /**\n   * The tenant id.\n   * `null` if it has never been set.\n   *\n   * @since 1.1.0\n   */\n  tenantId: string | null;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface SendPasswordResetEmailOptions {\n  /**\n   * @since 0.2.2\n   */\n  email: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SetLanguageCodeOptions {\n  /**\n   * BCP 47 language code.\n   *\n   * @example \"en-US\"\n   * @since 0.1.0\n   */\n  languageCode: string;\n}\n\n/**\n * @since 1.1.0\n */\nexport interface SetTenantIdOptions {\n  /**\n   * The tenant id.\n   *\n   * @since 1.1.0\n   */\n  tenantId: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface UpdateEmailOptions {\n  /**\n   * The new email address.\n   *\n   * @since 0.2.2\n   */\n  newEmail: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface UpdatePasswordOptions {\n  /**\n   * The new password.\n   *\n   * @since 0.2.2\n   */\n  newPassword: string;\n}\n\n/**\n * @since 1.3.0\n */\nexport interface UpdateProfileOptions {\n  /**\n   * The user's display name.\n   *\n   * @since 1.3.0\n   */\n  displayName?: string | null;\n  /**\n   * The user's photo URL.\n   *\n   * @since 1.3.0\n   */\n  photoUrl?: string | null;\n}\n\n/**\n * @since 1.1.0\n */\nexport type LinkOptions = SignInOptions;\n\n/**\n * @since 1.1.0\n */\nexport type LinkWithOAuthOptions = SignInWithOAuthOptions;\n\n/**\n * @since 1.1.0\n */\nexport interface LinkWithEmailAndPasswordOptions {\n  /**\n   * The user's email address.\n   *\n   * @since 1.1.0\n   */\n  email: string;\n  /**\n   * The user's password.\n   *\n   * @since 1.1.0\n   */\n  password: string;\n}\n\n/**\n * @since 1.1.0\n */\nexport interface LinkWithEmailLinkOptions {\n  /**\n   * The user's email address.\n   *\n   * @since 1.1.0\n   */\n  email: string;\n  /**\n   * The link sent to the user's email address.\n   *\n   * @since 1.1.0\n   */\n  emailLink: string;\n}\n\n/**\n * @since 1.1.0\n */\nexport interface LinkWithPhoneNumberOptions {\n  /**\n   * The user's phone number in E.164 format.\n   *\n   * @example \"+16505550101\"\n   * @since 1.1.0\n   */\n  phoneNumber: string;\n}\n\n/**\n * @since 1.1.0\n */\nexport type LinkWithCustomTokenOptions = SignInWithCustomTokenOptions;\n\n/**\n * @since 1.1.0\n */\nexport type LinkResult = SignInResult;\n\n/**\n * @since 0.1.0\n */\nexport interface SignInOptions {\n  /**\n   * Configures custom parameters to be passed to the identity provider during the OAuth sign-in flow.\n   *\n   * @since 0.1.0\n   * @deprecated Use `SignInWithOAuthOptions` interface instead.\n   */\n  customParameters?: SignInCustomParameter[];\n  /**\n   * Scopes to request from provider.\n   *\n   * @since 0.3.1\n   * @deprecated Use `SignInWithOAuthOptions` interface instead.\n   */\n  scopes?: string[];\n  /**\n   * Whether the plugin should skip the native authentication or not.\n   * Only needed if you want to use the Firebase JavaScript SDK.\n   * This value overwrites the configrations value of the `skipNativeAuth` option.\n   * If no value is set, the configuration value is used.\n   *\n   * **Note that the plugin may behave differently across the platforms.**\n   *\n   * `skipNativeAuth` cannot be used in combination with `signInWithCustomToken`, `createUserWithEmailAndPassword` or `signInWithEmailAndPassword`.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 1.1.0\n   */\n  skipNativeAuth?: boolean;\n}\n\n/**\n * @since 1.1.0\n */\nexport interface SignInWithOAuthOptions extends SignInOptions {\n  /**\n   * Configures custom parameters to be passed to the identity provider during the OAuth sign-in flow.\n   *\n   * Supports Apple, Facebook, GitHub, Google, Microsoft, Twitter and Yahoo on Web.\n   * Supports Apple, GitHub, Microsoft, Twitter and Yahoo on Android.\n   * Supports Facebook, GitHub, Microsoft, Twitter and Yahoo on iOS.\n   *\n   * @since 1.1.0\n   */\n  customParameters?: SignInCustomParameter[];\n  /**\n   * Whether to use the popup-based OAuth authentication flow or the full-page redirect flow.\n   * If you choose `redirect`, you will get the result of the call via the `authStateChange` listener after the redirect.\n   *\n   * @default 'popup'\n   * @since 1.3.0\n   */\n  mode?: 'popup' | 'redirect';\n  /**\n   * Scopes to request from provider.\n   *\n   * Supports Apple, Facebook, GitHub, Google, Microsoft, Twitter and Yahoo on Web.\n   * Supports Apple, GitHub, Microsoft, Twitter, Yahoo and Play Games on Android.\n   * Supports Facebook, GitHub, Google, Microsoft, Twitter and Yahoo on iOS.\n   *\n   * @since 1.1.0\n   */\n  scopes?: string[];\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInCustomParameter {\n  /**\n   * The custom parameter key (e.g. `login_hint`).\n   *\n   * @since 0.1.0\n   */\n  key: string;\n  /**\n   * The custom parameter value (e.g. `user@firstadd.onmicrosoft.com`).\n   *\n   * @since 0.1.0\n   */\n  value: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInWithPhoneNumberOptions extends SignInOptions {\n  /**\n   * The phone number to be verified.\n   *\n   * Cannot be used in combination with `verificationId` and `verificationCode`.\n   *\n   * Use the `phoneVerificationCompleted` listener to be notified when the verification is completed.\n   * Use the `phoneVerificationFailed` listener to be notified when the verification is failed.\n   * Use the `phoneCodeSent` listener to get the verification id.\n   *\n   * @since 0.1.0\n   */\n  phoneNumber?: string;\n  /**\n   * Resend the verification code to the specified phone number.\n   * `signInWithPhoneNumber` must be called once before using this option.\n   *\n   * The `phoneNumber` option must also be provided.\n   *\n   * Only available for Android.\n   *\n   * @since 1.3.0\n   * @default false\n   */\n  resendCode?: boolean;\n  /**\n   * The verification ID received from the `phoneCodeSent` listener.\n   *\n   * The `verificationCode` option must also be provided.\n   *\n   * @since 0.1.0\n   */\n  verificationId?: string;\n  /**\n   * The verification code either received from the `phoneCodeSent` listener or entered by the user.\n   *\n   * The `verificationId` option must also be provided.\n   *\n   * @since 0.1.0\n   */\n  verificationCode?: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface SignInWithEmailAndPasswordOptions extends SignInOptions {\n  /**\n   * The user's email address.\n   *\n   * @since 0.2.2\n   */\n  email: string;\n  /**\n   * The user's password.\n   *\n   * @since 0.2.2\n   */\n  password: string;\n}\n\n/**\n * @since 1.1.0\n */\nexport interface SendSignInLinkToEmailOptions {\n  /**\n   * The user's email address.\n   *\n   * @since 1.1.0\n   */\n  email: string;\n  /**\n   * Structure that contains the required continue/state URL with optional Android and iOS bundle identifiers.\n   *\n   * @since 1.1.0\n   */\n  actionCodeSettings: ActionCodeSettings;\n}\n\n/**\n * @since 1.1.0\n */\nexport interface IsSignInWithEmailLinkOptions {\n  /**\n   * The link sent to the user's email address.\n   *\n   * @since 1.1.0\n   */\n  emailLink: string;\n}\n/**\n * @since 1.1.0\n */\nexport interface IsSignInWithEmailLinkResult {\n  /**\n   * Whether an incoming link is a signup with email link suitable for `signInWithEmailLink(...)`.\n   */\n  isSignInWithEmailLink: boolean;\n}\n\n/**\n * @since 1.1.0\n */\nexport interface SignInWithEmailLinkOptions extends SignInOptions {\n  /**\n   * The user's email address.\n   *\n   * @since 1.1.0\n   */\n  email: string;\n  /**\n   * The link sent to the user's email address.\n   *\n   * @since 1.1.0\n   */\n  emailLink: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInWithCustomTokenOptions extends SignInOptions {\n  /**\n   * The custom token to sign in with.\n   *\n   * @since 0.1.0\n   */\n  token: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInResult {\n  /**\n   * The currently signed-in user, or null if there isn't any.\n   *\n   * @since 0.1.0\n   */\n  user: User | null;\n  /**\n   * Credentials returned by an auth provider.\n   *\n   * @since 0.1.0\n   */\n  credential: AuthCredential | null;\n  /**\n   * Additional user information from a federated identity provider.\n   *\n   * @since 0.5.1\n   */\n  additionalUserInfo: AdditionalUserInfo | null;\n}\n\n/**\n * @since 1.1.0\n */\nexport interface UnlinkOptions {\n  /**\n   * The provider to unlink.\n   *\n   * @since 1.1.0\n   */\n  providerId: ProviderId;\n}\n\n/**\n * @since 1.1.0\n */\nexport interface UnlinkResult {\n  /**\n   * The currently signed-in user, or null if there isn't any.\n   *\n   * @since 1.1.0\n   */\n  user: User | null;\n}\n\n/**\n * @since 0.2.0\n */\nexport interface UseEmulatorOptions {\n  /**\n   * The emulator host (e.g. `10.0.2.2`).\n   *\n   * @since 0.2.0\n   */\n  host: string;\n  /**\n   * The emulator port (e.g. `9099`).\n   *\n   * @default 9099\n   * @since 0.2.0\n   */\n  port?: number;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInWithPhoneNumberResult extends SignInResult {\n  /**\n   * The verification ID, which is needed to identify the verification code.\n   *\n   * @since 0.1.0\n   * @deprecated Use `addListener('phoneCodeSent', ...)` instead.\n   */\n  verificationId?: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface User {\n  /**\n   * @since 0.1.0\n   */\n  displayName: string | null;\n  /**\n   * @since 0.1.0\n   */\n  email: string | null;\n  /**\n   * @since 0.1.0\n   */\n  emailVerified: boolean;\n  /**\n   * @since 0.1.0\n   */\n  isAnonymous: boolean;\n  /**\n   * @since 0.1.0\n   */\n  phoneNumber: string | null;\n  /**\n   * @since 0.1.0\n   */\n  photoUrl: string | null;\n  /**\n   * @since 0.1.0\n   */\n  providerId: string;\n  /**\n   * @since 0.1.0\n   */\n  tenantId: string | null;\n  /**\n   * @since 0.1.0\n   */\n  uid: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface AuthCredential {\n  /**\n   * The OAuth access token associated with the credential if it belongs to an OAuth provider.\n   *\n   * @since 0.1.0\n   */\n  accessToken?: string;\n  /**\n   * A token that the app uses to interact with the server.\n   *\n   * Only available for Apple Sign-in on iOS.\n   *\n   * @since 1.2.0\n   */\n  authorizationCode?: string;\n  /**\n   * The OAuth ID token associated with the credential if it belongs to an OIDC provider.\n   *\n   * @since 0.1.0\n   */\n  idToken?: string;\n  /**\n   * The random string used to make sure that the ID token you get was granted specifically in response to your app's authentication request.\n   *\n   * @since 0.1.0\n   */\n  nonce?: string;\n  /**\n   * The authentication provider ID for the credential.\n   *\n   * @example \"google.com\"\n   * @since 0.1.0\n   */\n  providerId: string;\n  /**\n   * The OAuth access token secret associated with the credential if it belongs to an OAuth 1.0 provider.\n   *\n   * @since 0.1.0\n   */\n  secret?: string;\n}\n\n/**\n * @since 0.5.1\n */\nexport interface AdditionalUserInfo {\n  /**\n   * Whether the user is new (sign-up) or existing (sign-in).\n   *\n   * @since 0.5.1\n   */\n  isNewUser: boolean;\n  /**\n   * Map containing IDP-specific user data.\n   *\n   * @since 0.5.1\n   */\n  profile?: { [key: string]: unknown };\n  /**\n   * Identifier for the provider used to authenticate this user.\n   *\n   * @since 0.5.1\n   */\n  providerId?: string;\n  /**\n   * The username if the provider is GitHub or Twitter.\n   *\n   * @since 0.5.1\n   */\n  username?: string;\n}\n\n/**\n * Callback to receive the user's sign-in state change notifications.\n *\n * @since 0.1.0\n */\nexport type AuthStateChangeListener = (change: AuthStateChange) => void;\n\n/**\n * @since 0.1.0\n */\nexport interface AuthStateChange {\n  /**\n   * The currently signed-in user, or null if there isn't any.\n   *\n   * @since 0.1.0\n   */\n  user: User | null;\n}\n\n/**\n * Callback to receive the verification code sent to the user's phone number.\n *\n * @since 1.3.0\n */\nexport type PhoneVerificationCompletedListener = (event: {\n  /**\n   * The verification code sent to the user's phone number.\n   *\n   * @since 1.3.0\n   */\n  verificationCode: string;\n}) => void;\n\n/**\n * Callback to receive notifications of failed phone verification.\n *\n * @since 1.3.0\n */\nexport type PhoneVerificationFailedListener = (event: {\n  /**\n   * The error message.\n   *\n   * @since 1.3.0\n   */\n  message: string;\n}) => void;\n\n/**\n * Callback to receive the verification ID.\n *\n * @since 1.3.0\n */\nexport type PhoneCodeSentListener = (event: {\n  /**\n   * The verification ID, which is needed to identify the verification code.\n   *\n   * @since 1.3.0\n   */\n  verificationId: string;\n}) => void;\n\n/**\n * An interface that defines the required continue/state URL with optional Android and iOS\n * bundle identifiers.\n *\n * @since 1.1.0\n */\nexport interface ActionCodeSettings {\n  /**\n   * Sets the Android package name.\n   */\n  android?: {\n    installApp?: boolean;\n    minimumVersion?: string;\n    packageName: string;\n  };\n  /**\n   * When set to true, the action code link will be be sent as a Universal Link or Android App\n   * Link and will be opened by the app if installed.\n   */\n  handleCodeInApp?: boolean;\n  /**\n   * Sets the iOS bundle ID.\n   */\n  iOS?: {\n    bundleId: string;\n  };\n  /**\n   * Sets the link continue/state URL.\n   */\n  url: string;\n  /**\n   * When multiple custom dynamic link domains are defined for a project, specify which one to use\n   * when the link is to be opened via a specified mobile app (for example, `example.page.link`).\n   */\n  dynamicLinkDomain?: string;\n}\n\nexport enum ProviderId {\n  APPLE = 'apple.com',\n  FACEBOOK = 'facebook.com',\n  GAME_CENTER = 'gc.apple.com',\n  GITHUB = 'github.com',\n  GOOGLE = 'google.com',\n  MICROSOFT = 'microsoft.com',\n  PLAY_GAMES = 'playgames.google.com',\n  TWITTER = 'twitter.com',\n  YAHOO = 'yahoo.com',\n  PASSWORD = 'password',\n  PHONE = 'phone',\n}\n"]}